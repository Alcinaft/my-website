# main.py

import streamlit as st
from datetime import date
from database import (init_db,add_patient,add_doctor_action,get_doctor_actions,add_disease,get_all_patients,
                      get_patient_diseases,get_all_diseases,assign_disease_to_patient,add_monitoring_data,
                      check_monitoring_data,get_monitoring_data,notify_doctor,add_health_indicator,get_all_health_indicators,
                      delete_patient,delete_disease,delete_health_indicator,add_monitoring_schedule,get_planned_monitoring,
                      mark_monitoring_as_completed,add_voice_monitoring,generate_doctor_recommendations,analyze_risks,
                      generate_analytics_report,add_question,get_all_questions,update_question,delete_question,
                      update_data_retention_period,get_data_retention_period,delete_old_records,
                      get_patient_health_indicators)
#from voice_bot import speech_to_text
from func import get_patient_report,get_disease_report,get_indicator_report

if 'db_initialized' not in st.session_state:
    st.session_state.db_initialized = True
    init_db()

st.title("–¶–∏—Ñ—Ä–æ–≤–æ–π –¥–≤–æ–π–Ω–∏–∫ –ø–∞—Ü–∏–µ–Ω—Ç–∞")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
st.header("–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞")
name = st.text_input("–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞")
contact_info = st.text_input("–ö–æ–Ω—Ç–∞–∫—Ç—ã")
if st.button("–î–æ–±–∞–≤–∏—Ç—å"):
    add_patient(name, contact_info)
    st.success("–ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏ –∏—Ö –±–æ–ª–µ–∑–Ω–µ–π
st.header("–í—Å–µ –ø–∞—Ü–∏–µ–Ω—Ç—ã")
patients = get_all_patients()

if patients:
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    patient_data = []

    for patient in patients:
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª–µ–∑–Ω–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        diseases = get_patient_diseases(patient["ID"])
        if diseases:
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ–ª–µ–∑–Ω–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            disease_names = ", ".join([d["Name"] for d in diseases])
        else:
            disease_names = "–ù–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π"

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        patient_data.append({
            "ID –ø–∞—Ü–∏–µ–Ω—Ç–∞": patient["ID"],
            "–ò–º—è –ø–∞—Ü–∏–µ–Ω—Ç–∞": patient["Name"],
            "–ö–æ–Ω—Ç–∞–∫—Ç—ã": patient["Contact Info"],
            "–ë–æ–ª–µ–∑–Ω–∏": disease_names
        })

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
    st.dataframe(patient_data)
else:
    st.write("–ù–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞
st.header("–£–¥–∞–ª–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞")
patients = get_all_patients()

if patients:
    # –í—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞
    selected_patient = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        [f"{p['ID']} - {p['Name']}" for p in patients]
    )
    patient_id = int(selected_patient.split(" - ")[0])
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if st.button("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
        st.session_state.confirm_delete_patient = True
    if st.session_state.get('delete_patient'):
        success=delete_patient(patient_id)
        if success:
            st.success("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
        else:
            st.error('–û—à–∏–±–∫–∞')
        st.session_state.confirm_delete_patient = False
    if st.session_state.get('close_patient'):
        st.session_state.confirm_delete_patient = False
    if st.session_state.get("confirm_delete_patient", False):
        st.warning("–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èü§®")
        yes_button=st.button("–î–∞",key='delete_patient')
        no_button=st.button("–ù–µ—Ç",key='close_patient')
else:
    st.write("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
st.header("–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–∑–Ω–∏")
disease_name = st.text_input("–ò–º—è –±–æ–ª–µ–∑–Ω–∏")
disease_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏")
if st.button("–î–æ–±–∞–≤–∏—Ç—å",key='add_disease'):
    add_disease(disease_name, disease_description)
    st.success("–ë–æ–ª–µ–∑–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
st.header("–í—Å–µ –±–æ–ª–µ–∑–Ω–∏")
diseases = get_all_diseases()
if diseases:
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ DataFrame
    st.dataframe(diseases)
else:
    st.write("–ù–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π")

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
st.header("–£–¥–∞–ª–∏—Ç—å –±–æ–ª–µ–∑–Ω—å")
diseases = get_all_diseases()

if diseases:
    # –í—ã–±–æ—Ä –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
    selected_disease = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–∑–Ω—å",
        [f"{d['ID']} - {d['Name']}" for d in diseases]
    )
    disease_id = int(selected_disease.split(" - ")[0])
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if st.button("–£–¥–∞–ª–∏—Ç—å –±–æ–ª–µ–∑–Ω—å"):
        st.session_state.confirm_delete_disease = True
    if st.session_state.get('delete_disease'):
        success =delete_disease(disease_id)
        if success:
            st.success("–ë–æ–ª–µ–∑–Ω—å —É–¥–∞–ª–µ–Ω–∞")
        else:
            st.error("–û—à–∏–±–∫–∞")
        st.session_state.confirm_delete_disease = False
    if st.session_state.get('close_disease'):
        st.session_state.confirm_delete_disease=False
    if st.session_state.get("confirm_delete_disease", False):
        st.warning("–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –±–æ–ª–µ–∑–Ω—åü§®")
        yes_button=st.button("–î–∞",key='delete_disease')
        no_button=st.button("–ù–µ—Ç",key='close_disease')
else:
    st.write("–ù–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π")

# –ü—Ä–∏–≤—è–∑–∫–∞ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É
st.header("–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–∑–Ω—å –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É")
patients = get_all_patients()
diseases = get_all_diseases()
if patients and diseases:
    # –í—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞
    selected_patient = st.selectbox(
        "–í—ã–±–∏—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
        [f"{p['ID']} - {p['Name']}" for p in patients]
    )
    patient_id = int(selected_patient.split(" - ")[0])

    # –í—ã–±–æ—Ä –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
    selected_disease = st.selectbox(
        "–í—ã–±–∏—Ä–∏—Ç–µ –±–æ–ª–µ–∑–Ω—å",
        [f"{d['ID']} - {d['Name']}" for d in diseases]
    )
    disease_id = int(selected_disease.split(" - ")[0])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
    if st.button("–î–æ–±–∞–≤–∏—Ç—å",key='add_diasese_to_p'):
        success=assign_disease_to_patient(patient_id, disease_id)
        if success:
            st.success("–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            st.error("–¢–∞–∫–∞—è –±–æ–ª–µ–∑–Ω—å –∫ –ø–∞—Ü–∏–µ–Ω—Ç—É —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞!")
else:
    st.write("–ù–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –±–æ–ª–µ–∑–Ω–µ–π.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–¥–æ—Ä–æ–≤—å—è
st.header("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –±–æ–ª–µ–∑–Ω–∏")
diseases = get_all_diseases()

if diseases:
    # –í—ã–±–æ—Ä –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
    selected_disease = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–∑–Ω—å",
        [f"{d['ID']} - {d['Name']}" for d in diseases],key='add_healthI'
    )
    disease_id = int(selected_disease.split(" - ")[0])

    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ
    name = st.text_input("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å")
    reference_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", step=1)
    reference_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", step=1)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if st.button("–î–æ–±–∞–≤–∏—Ç—å",key='add_health_in'):
        success = add_health_indicator(disease_id, name, reference_min, reference_max)
        if success:
            st.success("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            st.error("–û—à–∏–±–∫–∞")
else:
    st.write("–ù–µ—Ç –±–æ–ª–µ–∑–Ω–µ–π")

st.header("–í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –±–æ–ª–µ–∑–Ω–µ–π")
indicators = get_all_health_indicators()

if indicators:
    st.dataframe(indicators)
else:
    st.write("–ù–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–¥–æ—Ä–æ–≤—å—è
st.header("–£–¥–∞–ª–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è")
indicators = get_all_health_indicators()

if indicators:
    # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–¥–æ—Ä–æ–≤—å—è
    selected_indicator = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è",
        [f"{i['ID']} - {i['Name']}" for i in indicators]
    )
    indicator_id = int(selected_indicator.split(" - ")[0])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if st.button("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–¥–æ—Ä–æ–≤—å—è"):
        st.session_state.confirm_delete_indicator = True
    if st.session_state.get('delete_indicator'):
        success = delete_health_indicator(indicator_id)
        if success:
            st.success("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
        else:
            st.error("–û—à–∏–±–∫–∞")
        st.session_state.confirm_delete_indicator=False
    if st.session_state.get('close_indicator'):
        st.session_state.confirm_delete_indicator = False
    if st.session_state.get("confirm_delete_indicator", False):
        st.warning("–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—èü§®")
        yes_button=st.button("–î–∞",key='delete_indicator')
        no_button=st.button("–ù–µ—Ç",key='close_indicator')
else:
    st.write("–ù–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
st.header("–î–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
patients = get_all_patients()

if patients and indicators:
    # –í—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞
    selected_patient = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
        [f"{p['ID']} - {p['Name']}" for p in patients],key='add_monData'
    )
    patient_id = int(selected_patient.split(" - ")[0])
    indicators = get_patient_health_indicators(patient_id)
    # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–¥–æ—Ä–æ–≤—å—è
    selected_indicator = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –±–æ–ª–µ–∑–Ω–∏",
        [f"{i['ID']} - {i['Name']}" for i in indicators]
    )
    indicator_id = int(selected_indicator.split(" - ")[0])

    # –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è
    value = st.number_input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è", step=1)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if st.button("–î–æ–±–∞–≤–∏—Ç—å",key='add_mon'):
        success = add_monitoring_data(patient_id, indicator_id, value)
        if success:
            is_normal = check_monitoring_data(patient_id, indicator_id, value)
            if is_normal:
                st.success("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ. –í—Å–µ —Ö–æ—Ä–æ—à–æ!")
            else:
                notify_doctor(patient_id, indicator_id, value)
                st.error("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã!")
        else:
            st.error("–û—à–∏–±–∫–∞")
else:
    st.write("–ù–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
st.header("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏")
patients = get_all_patients()

if patients:
    # –í—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞
    selected_patient = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
        [f"{p['ID']} - {p['Name']}" for p in patients],key='view_monResults'
    )
    patient_id = int(selected_patient.split(" - ")[0])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitoring_data = get_monitoring_data(patient_id)
    if monitoring_data:
        st.dataframe(monitoring_data)
    else:
        st.write("–ù–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
else:
    st.write("–ù–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
st.header("Set Monitoring Frequency")
patients = get_all_patients()
indicators = get_all_health_indicators()

if patients and indicators:
    # –í—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞
    selected_patient = st.selectbox(
        "Select Patient",
        [f"{p['ID']} - {p['Name']}" for p in patients]
    )
    patient_id = int(selected_patient.split(" - ")[0])

    # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–¥–æ—Ä–æ–≤—å—è
    selected_indicator = st.selectbox(
        "Select Health Indicator",
        [f"{i['ID']} - {i['Name']}" for i in indicators]
    )
    indicator_id = int(selected_indicator.split(" - ")[0])

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å—Ç–æ—Ç—ã
    frequency = st.selectbox("Frequency", ["daily", "weekly", "custom"])
    if frequency == "custom":
        interval_days = st.number_input("Interval (Days)", min_value=1, value=1)
    else:
        interval_days = 1 if frequency == "daily" else 7

    # –î–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    start_date = st.date_input("Start Date")
    end_date = st.date_input("End Date")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞
    if st.button("Set Monitoring Frequency"):
        success = add_monitoring_schedule(patient_id, indicator_id, frequency, interval_days, start_date, end_date, start_date)
        if success:
            st.success("Monitoring frequency set successfully!")
        else:
            st.error("Failed to set monitoring frequency.")
else:
    st.write("No patients or health indicators available.")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
st.header("Planned Monitoring")
planned_monitoring = get_planned_monitoring()

if planned_monitoring:
    st.dataframe(planned_monitoring)
else:
    st.write("No planned monitoring available.")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
st.header("Complete Monitoring")
planned_monitoring = get_planned_monitoring()

if planned_monitoring:
    # –í—ã–±–æ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    selected_monitoring = st.selectbox(
        "Select Monitoring to Complete",
        [f"{m['ID']} - {m['Patient Name']} - {m['Indicator Name']}" for m in planned_monitoring if m["Status"] == "Planned"]
    )
    if selected_monitoring:
        schedule_id = int(selected_monitoring.split(" - ")[0])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if st.button("Complete Monitoring"):
            success = mark_monitoring_as_completed(schedule_id)
            if success:
                st.success("Monitoring marked as completed!")
            else:
                st.error("Failed to mark monitoring as completed.")
else:
    st.write("No planned monitoring available to complete.")

# –î–µ–π—Å—Ç–≤–∏—è –≤—Ä–∞—á–∞
st.header("–î–µ–π—Å—Ç–≤–∏—è –≤—Ä–∞—á–∞")
patients = get_all_patients()

if patients:
    # –í—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞
    selected_patient = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞",
        [f"{p['ID']} - {p['Name']}" for p in patients],key='doc_actions'
    )
    patient_id = int(selected_patient.split(" - ")[0])

    # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    action = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        ["Schedule Consultation", "Urgent Contact", "No Action Needed"]
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è
    if st.button("–ó–∞–ø–∏—Å–∞—Ç—å"):
        success = add_doctor_action(patient_id, action)
        if success:
            st.success("–î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            st.error("–û—à–∏–±–∫–∞")

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤—Ä–∞—á–∞
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤—Ä–∞—á–∞")
    actions = get_doctor_actions(patient_id)
    if actions:
        st.dataframe(actions)
    else:
        st.write("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π")
else:
    st.write("–ù–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤")

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
st.header("–û—Ç—á–µ—Ç –æ –±–æ–ª–µ–∑–Ω–∏")
disease_report = get_disease_report()

if disease_report:
    st.dataframe(disease_report)
else:
    st.write("No data available for disease report.")

# –û—Ç—á–µ—Ç –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º
st.header("Report by Patients")
patient_report = get_patient_report()

if patient_report:
    st.dataframe(patient_report)
else:
    st.write("No data available for patient report.")

# –û—Ç—á–µ—Ç –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º –∑–¥–æ—Ä–æ–≤—å—è
st.header("Report by Health Indicators")
indicator_report = get_indicator_report()

if indicator_report:
    st.dataframe(indicator_report)
else:
    st.write("No data available for health indicators report.")

# –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ä–æ–±–æ—Ç–∞
st.header("Voice Monitoring Data Collection")
patients = get_all_patients()

if patients:
    # –í—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞
    selected_patient = st.selectbox(
        "Select Patient",
        [f"{p['ID']} - {p['Name']}" for p in patients],key='voice_coll_p'
    )
    patient_id = int(selected_patient.split(" - ")[0])
    indicators = get_patient_health_indicators(patient_id)
    if indicators:
        # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–¥–æ—Ä–æ–≤—å—è
        selected_indicator = st.selectbox(
            "Select Health Indicator",
            [f"{i['ID']} - {i['Name']}" for i in indicators],key='voice_coll_i'
        )
        indicator_id = int(selected_indicator.split(" - ")[0])

        # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞
        raw_response = st.text_area("Patient's Response (Text)", placeholder="Enter patient's response here")

        # –ü—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
        try:
            parsed_value = float(raw_response.split(":")[-1].strip())  # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞
        except ValueError:
            parsed_value = None

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if st.button("Add Voice Monitoring Data"):
            if parsed_value is not None:
                success = add_voice_monitoring(patient_id, indicator_id, raw_response, parsed_value)
                if success:
                    st.success("Voice monitoring data added successfully!")
                else:
                    st.error("Failed to add voice monitoring data.")
            else:
                st.error("Invalid response format. Please ensure the response contains a numeric value.")
    else:
        st.write("No health indicators available for this patient.")
else:
    st.write("No patients or health indicators available.")

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—Ä–∞—á–∞
st.header("Doctor Recommendations")
patients = get_all_patients()
if patients:
    selected_patient = st.selectbox(
        "Select Patient",
        [f"{p['ID']} - {p['Name']}" for p in get_all_patients()],key='doctor_rec'
    )
    patient_id = int(selected_patient.split(" - ")[0])

    if st.button("Generate Recommendations"):
        recommendations = generate_doctor_recommendations(patient_id)
        if recommendations:
            st.subheader("Recommendations:")
            for rec in recommendations:
                st.write(f"- {rec}")
        else:
            st.write("No recommendations available.")
else:
    st.write("No patients available.")

# –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
st.header("Risk Analysis")
selected_patient = st.selectbox(
    "Select Patient",
    [f"{p['ID']} - {p['Name']}" for p in get_all_patients()],key='risk_a'
)
patient_id = int(selected_patient.split(" - ")[0])

if st.button("Analyze Risks"):
    risks = analyze_risks(patient_id)
    if risks:
        st.subheader("Risks Detected:")
        for risk in risks:
            st.write(f"- {risk}")
    else:
        st.write("No risks detected.")

# –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
st.header("Analytics Report")
report = generate_analytics_report()

if report:
    st.dataframe(report)
else:
    st.write("No data available for analytics report.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
st.header("–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∞")
indicators = get_all_health_indicators()

if indicators:
    # –í—ã–±–æ—Ä –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–¥–æ—Ä–æ–≤—å—è
    selected_indicator = st.selectbox(
        "Select Health Indicator",
        [f"{i['ID']} - {i['Name']}" for i in indicators],key='add_questions'
    )
    indicator_id = int(selected_indicator.split(" - ")[0])

    # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    question_text = st.text_area("Question Text", placeholder="Enter the question here")

    # –í–≤–æ–¥ –ø—Ä–∏–º–µ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    example_response = st.text_input("Example Response", placeholder="Enter an example response here")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
    if st.button("Add Question"):
        if question_text and example_response:
            success = add_question(indicator_id, question_text, example_response)
            if success:
                st.success("Question added successfully!")
            else:
                st.error("Failed to add question.")
        else:
            st.error("Please fill in all fields.")
else:
    st.write("No health indicators available.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏
st.header("–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ä–æ–±–æ—Ç–∞")
questions = get_all_questions()

if questions:
    st.dataframe(questions)

    # –í—ã–±–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    selected_question = st.selectbox(
        "Select Question to Edit",
        [f"{q['ID']} - {q['Question Text']}" for q in questions],key='manage_q'
    )
    question_id = int(selected_question.split(" - ")[0])

    # –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    new_question_text = st.text_area("New Question Text", placeholder="Enter new question text here")

    # –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
    new_example_response = st.text_input("New Example Response", placeholder="Enter new example response here")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if st.button("Update Question"):
        if new_question_text and new_example_response:
            success = update_question(question_id, new_question_text, new_example_response)
            if success:
                st.success("Question updated successfully!")
            else:
                st.error("Failed to update question.")
        else:
            st.error("Please fill in all fields.")

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if st.button("Delete Question"):
        success = delete_question(question_id)
        if success:
            st.success("Question deleted successfully!")
        else:
            st.error("Failed to delete question.")
else:
    st.write("No questions available.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
st.header("Data Retention Settings")
current_period = get_data_retention_period()

# –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è
new_period = st.number_input(
    "Set Data Retention Period (Days)",
    min_value=1,
    max_value=365,
    value=current_period
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
if st.button("Save Settings"):
    success = update_data_retention_period(new_period)
    if success:
        st.success(f"Data retention period updated to {new_period} days.")
    else:
        st.error("Failed to update data retention period.")

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
st.header("Delete Old Records")
if st.button("Delete Old Records"):
    success = delete_old_records()
    if success:
        st.success("Old records deleted successfully.")
    else:
        st.error("Failed to delete old records.")

























database.py
import sqlite3
import logging
import streamlit as st
from datetime import timedelta,datetime

logging.basicConfig(level=logging.DEBUG)
def get_connection():
    return sqlite3.connect('patients.db', check_same_thread=False)
conn = get_connection()
c = conn.cursor()
def init_db():
    with conn:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        c.execute('''
        CREATE TABLE IF NOT EXISTS Patients (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            contact_info TEXT,
            monitoring_frequency INTEGER
        )
        ''')
        c.execute('''
        CREATE TABLE IF NOT EXISTS Diseases (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            description TEXT
        )
        ''')
        c.execute('''
        CREATE TABLE IF NOT EXISTS PatientDiseases (
            patient_id INTEGER,
            disease_id INTEGER,
            FOREIGN KEY (patient_id) REFERENCES Patients(id),
            FOREIGN KEY (disease_id) REFERENCES Diseases(id),
            UNIQUE (patient_id, disease_id)
        )
        ''')
        c.execute('''
        CREATE TABLE IF NOT EXISTS HealthIndicators (
            id INTEGER PRIMARY KEY,
            disease_id INTEGER,
            name TEXT NOT NULL UNIQUE,
            reference_min REAL,
            reference_max REAL,
            FOREIGN KEY (disease_id) REFERENCES Diseases(id)
        )
        ''')

        c.execute('''
        CREATE TABLE IF NOT EXISTS Monitoring (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER,
            indicator_id INTEGER,
            value REAL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (patient_id) REFERENCES Patients(id),
            FOREIGN KEY (indicator_id) REFERENCES HealthIndicators(id)
        )
        ''')

        c.execute('''
        CREATE TABLE IF NOT EXISTS DoctorActions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER,
            action TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (patient_id) REFERENCES Patients(id)
        )
        ''')

        c.execute('''
        CREATE TABLE IF NOT EXISTS MonitoringSchedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER,
            indicator_id INTEGER,
            frequency TEXT,  -- –ù–∞–ø—Ä–∏–º–µ—Ä: "daily", "weekly"
            interval_days INTEGER,  -- –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–±–æ—Ä–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö (–≤ –¥–Ω—è—Ö)
            start_date DATE,
            end_date DATE,
            next_monitoring_date DATE,  -- –î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            status TEXT DEFAULT 'Planned',  -- –ù–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
            FOREIGN KEY (patient_id) REFERENCES Patients(id),
            FOREIGN KEY (indicator_id) REFERENCES HealthIndicators(id)
        )
        ''')

        c.execute('''
        CREATE TABLE IF NOT EXISTS VoiceMonitoring (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            patient_id INTEGER,
            indicator_id INTEGER,
            raw_response TEXT,  -- –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞
            parsed_value REAL,  -- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (patient_id) REFERENCES Patients(id),
            FOREIGN KEY (indicator_id) REFERENCES HealthIndicators(id)
        )
        ''')

        c.execute('''
        CREATE TABLE IF NOT EXISTS Questions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            indicator_id INTEGER,  -- –°–≤—è–∑—å —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º –∑–¥–æ—Ä–æ–≤—å—è
            question_text TEXT,    -- –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            example_response TEXT, -- –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è –ø–æ–º–æ—â–∏ –ø–∞—Ü–∏–µ–Ω—Ç—É)
            FOREIGN KEY (indicator_id) REFERENCES HealthIndicators(id)
        )
        ''')

        c.execute('''
        CREATE TABLE IF NOT EXISTS Settings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            setting_name TEXT UNIQUE,  -- –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            setting_value TEXT         -- –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        )
        ''')

        conn.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö ID –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
def get_all_patient_ids():
    with conn:
        c.execute("SELECT id FROM Patients")
        rows = c.fetchall()
        return [row[0] for row in rows]

def get_all_disease_ids():
    with conn:
        c.execute("SELECT id FROM PatientDiseases")
        rows = c.fetchall()
        return [row[0] for row in rows]

def get_all_health_i_ids():
    with conn:
        c.execute("SELECT id FROM HealthIndicators")
        rows = c.fetchall()
        return [row[0] for row in rows]

def add_patient(name, contact_info):
    with conn:
        existing_ids=get_all_patient_ids()
        # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ID
        if not existing_ids:
            next_id = 1  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        else:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º ID
            existing_ids.sort()
            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π "–¥—ã—Ä—è–≤—ã–π" ID
            for i in range(1, max(existing_ids) + 2):
                if i not in existing_ids:
                    next_id = i
                    break
            else:
                next_id = max(existing_ids) + 1
        c.execute("INSERT INTO Patients (id, name, contact_info) VALUES (?, ?, ?)", (next_id, name, contact_info))
        conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def add_monitoring_data(patient_id, indicator_id, value):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO Monitoring (patient_id, indicator_id, value, timestamp)
                VALUES (?, ?, ?, datetime('now','localtime'))
            """, (patient_id, indicator_id, value,))
            conn.commit()
            logging.debug(f"Monitoring data added: Patient {patient_id}, Indicator {indicator_id}, Value {value}")
        return True
    except Exception as e:
        logging.error(f"Error adding monitoring data: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç –Ω–æ—Ä–º—ã
def check_monitoring_data(patient_id, indicator_id, value):
    with get_connection() as conn:
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT reference_min, reference_max
            FROM HealthIndicators
            WHERE id = ?
        """, (indicator_id,))
        result = cursor.fetchone()
        if not result:
            logging.error(f"No reference values found for indicator {indicator_id}")
            return None

        reference_min, reference_max = result
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã
        if value < reference_min or value > reference_max:
            logging.warning(f"Abnormal value detected: Patient {patient_id}, Indicator {indicator_id}, Value {value}")
            return False  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –Ω–æ—Ä–º—ã
        return True  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ

def get_monitoring_data(patient_id):
    with conn:
        c.execute("""
        SELECT m.id,h.name, m.value, m.timestamp 
        FROM Monitoring m
        JOIN HealthIndicators h ON m.indicator_id = h.id
        WHERE m.patient_id = ?
        """, (patient_id,))
        rows = c.fetchall()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        data = [{"ID": row[0], "Indicator": row[1], "Value": row[2], "Timestamp": row[3]} for row in rows]
        return data

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–¥–æ—Ä–æ–≤—å—è
def add_health_indicator(disease_id, name, reference_min, reference_max):
    try:
        if reference_min >= reference_max:
            st.error("Reference Min must be less than Reference Max.")
            return
        with get_connection() as conn:
            cursor = conn.cursor()
            existing_ids = get_all_health_i_ids()
            # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ID
            if not existing_ids:
                next_id = 1  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
            else:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º ID
                existing_ids.sort()
                # –ò—â–µ–º –ø–µ—Ä–≤—ã–π "–¥—ã—Ä—è–≤—ã–π" ID
                for i in range(1, max(existing_ids) + 2):
                    if i not in existing_ids:
                        next_id = i
                        break
                else:
                    next_id = max(existing_ids) + 1
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            cursor.execute("""
                INSERT INTO HealthIndicators (id,disease_id, name, reference_min, reference_max)
                VALUES (?, ?, ?, ?, ?)
            """, (next_id,disease_id, name, reference_min, reference_max,))

            conn.commit()
            logging.debug(f"Health indicator added: {name}, Disease ID: {disease_id}")
        return True
    except sqlite3.IntegrityError:
        logging.warning(f"Duplicate entry: Health indicator '{name}' already exists for disease ID {disease_id}")
        return False
    except Exception as e:
        logging.error(f"Error adding health indicator: {e}")
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è
def get_all_health_indicators():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, disease_id, name, reference_min, reference_max
            FROM HealthIndicators
        """)
        rows = cursor.fetchall()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        indicators = [
            {
                "ID": row[0],
                "Disease ID": row[1],
                "Name": row[2],
                "Reference Min": row[3],
                "Reference Max": row[4]
            }
            for row in rows
        ]
        return indicators

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
def get_patient_health_indicators(patient_id):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT hi.id AS indicator_id, hi.name AS indicator_name
            FROM HealthIndicators hi
            JOIN PatientDiseases pd ON hi.disease_id = pd.disease_id
            WHERE pd.patient_id = ?
        """, (patient_id,))
        rows = cursor.fetchall()
        indicators = [
            {
                "ID": row[0],
                "Name": row[1]
            }
            for row in rows
        ]
        return indicators

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏
def notify_doctor(patient_id, indicator_id, value):
    st.error(f"Critical value detected for Patient {patient_id}, Indicator {indicator_id}: {value}")

def add_doctor_action(patient_id, action):
    try:
        patient_id=int(patient_id)
        with conn:
            c.execute("INSERT INTO DoctorActions (patient_id, action, timestamp) VALUES (?, ?, datetime('now','localtime'))", (patient_id, action,))
            conn.commit()
            logging.debug(f"Doctor action recorded: Patient {patient_id}, Action '{action}'")
        return True
    except Exception as e:
        logging.error(f"Error adding doctor action: {e}")
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –≤—Ä–∞—á–∞ –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
def get_doctor_actions(patient_id):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT action, timestamp
            FROM DoctorActions
            WHERE patient_id = ?
            ORDER BY timestamp DESC
        """, (patient_id,))
        rows = cursor.fetchall()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        actions = [
            {
                "Action": row[0],
                "Timestamp": row[1]
            }
            for row in rows
        ]
        return actions

def generate_report_by_disease(disease_id):
    with conn:
        c.execute("""
        SELECT p.name, h.name, m.value, m.timestamp
        FROM Monitoring m
        JOIN Patients p ON m.patient_id = p.id
        JOIN HealthIndicators h ON m.indicator_id = h.id
        WHERE h.disease_id = ?
        """, (disease_id,))
        return c.fetchall()

def add_disease(name, description):
    with conn:
        existing_ids = get_all_disease_ids()
        # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π ID
        if not existing_ids:
            next_id = 1  # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è
        else:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º ID
            existing_ids.sort()
            # –ò—â–µ–º –ø–µ—Ä–≤—ã–π "–¥—ã—Ä—è–≤—ã–π" ID
            for i in range(1, max(existing_ids) + 2):
                if i not in existing_ids:
                    next_id = i
                    break
            else:
                next_id = max(existing_ids) + 1
        c.execute("INSERT INTO Diseases (id, name, description) VALUES (?, ?, ?)", (next_id,name, description))
        conn.commit()
        logging.debug(f"Disease added: {name}, {description}")

def get_all_diseases():
    with conn:
        c.execute("SELECT id, name, description FROM Diseases")
        rows = c.fetchall()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        diseases = [{"ID": row[0], "Name": row[1], "Description": row[2]} for row in rows]
        return diseases

def get_all_patients():
    with conn:
        c.execute("SELECT id, name, contact_info FROM Patients")
        rows = c.fetchall()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        patients = [{"ID": row[0], "Name": row[1], "Contact Info": row[2]} for row in rows]
        return patients

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –¥–ª—è –ø–∞—Ü–∏–µ–Ω—Ç–∞
def get_patient_diseases(patient_id):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT d.id AS disease_id, d.name AS disease_name, d.description AS disease_description
            FROM PatientDiseases pd
            JOIN Diseases d ON pd.disease_id = d.id
            WHERE pd.patient_id = ?
        """, (patient_id,))
        rows = cursor.fetchall()
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        diseases = [
            {
                "ID": row[0],  # ID –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
                "Name": row[1],  # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
                "Description": row[2]  # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è
            }
            for row in rows
        ]
        return diseases

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–≤—è–∑–∏
def check_existing_assignment(patient_id, disease_id):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM PatientDiseases WHERE patient_id = ? AND disease_id = ?", (patient_id, disease_id))
        return cursor.fetchone() is not None

def assign_disease_to_patient(patient_id, disease_id):
    if check_existing_assignment(patient_id, disease_id):
        logging.warning(f"Disease {disease_id} is already assigned to patient {patient_id}")
        return False  # –°–≤—è–∑—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try:
        with conn:
            c.execute("INSERT INTO PatientDiseases (patient_id, disease_id) VALUES (?, ?)", (patient_id, disease_id))
            conn.commit()
            logging.debug(f"Disease {disease_id} assigned to patient {patient_id}")
        return True
    except Exception as e:
        logging.error(f"Error assigning disease to patient: {e}")
        return False

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def delete_patient(patient_id):
    try:
        with conn:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ Monitoring
            c.execute("DELETE FROM Monitoring WHERE patient_id = ?", (patient_id,))
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ PatientDiseases
            c.execute("DELETE FROM PatientDiseases WHERE patient_id = ?", (patient_id,))
            # –£–¥–∞–ª—è–µ–º –ø–∞—Ü–∏–µ–Ω—Ç–∞
            c.execute("DELETE FROM Patients WHERE id = ?", (patient_id,))
            conn.commit()
            logging.debug(f"Patient {patient_id} and related data deleted successfully.")
        return True
    except Exception as e:
        logging.error(f"Error deleting patient {patient_id}: {e}")
        return False

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def delete_disease(disease_id):
    try:
        with conn:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ PatientDiseases
            c.execute("DELETE FROM PatientDiseases WHERE disease_id = ?", (disease_id,))
            # –£–¥–∞–ª—è–µ–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ
            c.execute("DELETE FROM Diseases WHERE id = ?", (disease_id,))
            conn.commit()
            logging.debug(f"Disease {disease_id} and related data deleted successfully.")
        return True
    except Exception as e:
        logging.error(f"Error deleting disease {disease_id}: {e}")
        return False

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def delete_health_indicator(indicator_id):
    try:
        with conn:
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ Monitoring
            c.execute("DELETE FROM Monitoring WHERE indicator_id = ?", (indicator_id,))
            # –£–¥–∞–ª—è–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∑–¥–æ—Ä–æ–≤—å—è
            c.execute("DELETE FROM HealthIndicators WHERE id = ?", (indicator_id,))
            conn.commit()
            logging.debug(f"Health indicator {indicator_id} and related data deleted successfully.")
        return True
    except Exception as e:
        logging.error(f"Error deleting health indicator {indicator_id}: {e}")
        return False

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def add_monitoring_schedule(patient_id, indicator_id, frequency,interval_days, start_date, end_date, next_monitoring_date):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO MonitoringSchedule (
                    patient_id, indicator_id, frequency, interval_days, start_date, end_date, next_monitoring_date
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (patient_id, indicator_id, frequency, interval_days, start_date, end_date, next_monitoring_date))
            conn.commit()
            logging.debug(f"Monitoring schedule added: Patient {patient_id}, Indicator {indicator_id}")
        return True
    except Exception as e:
        logging.error(f"Error adding monitoring schedule: {e}")
        return False

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def update_next_monitoring_date(schedule_id):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            cursor.execute("SELECT interval_days, next_monitoring_date FROM MonitoringSchedule WHERE id = ?", (schedule_id,))
            row = cursor.fetchone()
            if row:
                interval_days, current_date = row
                next_date = current_date + timedelta(days=interval_days)
                cursor.execute("UPDATE MonitoringSchedule SET next_monitoring_date = ? WHERE id = ?", (next_date, schedule_id))
                conn.commit()
                logging.debug(f"Next monitoring date updated for schedule {schedule_id}")
        return True
    except Exception as e:
        logging.error(f"Error updating next monitoring date: {e}")
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤ —Å —É—á–µ—Ç–æ–º —Å—Ç–∞—Ç—É—Å–∞
def get_planned_monitoring():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT ms.id, p.name AS patient_name, hi.name AS indicator_name, ms.frequency, ms.interval_days, ms.next_monitoring_date, ms.status
            FROM MonitoringSchedule ms
            JOIN Patients p ON ms.patient_id = p.id
            JOIN HealthIndicators hi ON ms.indicator_id = hi.id
        """)
        rows = cursor.fetchall()
        planned_monitoring = [
            {
                "ID": row[0],
                "Patient Name": row[1],
                "Indicator Name": row[2],
                "Frequency": row[3],
                "Interval (Days)": row[4],
                "Next Monitoring Date": row[5],
                "Status": row[6]
            }
            for row in rows
        ]
        return planned_monitoring

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ "Completed"
def mark_monitoring_as_completed(schedule_id):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("UPDATE MonitoringSchedule SET status = 'Completed' WHERE id = ?", (schedule_id,))
            conn.commit()
            logging.debug(f"Monitoring schedule {schedule_id} marked as completed.")
        return True
    except Exception as e:
        logging.error(f"Error marking monitoring as completed: {e}")
        return False


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def add_voice_monitoring(patient_id, indicator_id, raw_response, parsed_value):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO VoiceMonitoring (patient_id, indicator_id, raw_response, parsed_value)
                VALUES (?, ?, ?, ?)
            """, (patient_id, indicator_id, raw_response, parsed_value))
            conn.commit()
            logging.debug(f"Voice monitoring data added for Patient {patient_id}, Indicator {indicator_id}")
        return True
    except Exception as e:
        logging.error(f"Error adding voice monitoring data: {e}")
        return False

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤—Ä–∞—á–∞
def generate_doctor_recommendations(patient_id):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è
            cursor.execute("""
                SELECT hi.name AS indicator_name, m.value AS monitoring_value, hi.reference_min, hi.reference_max
                FROM Monitoring m
                JOIN HealthIndicators hi ON m.indicator_id = hi.id
                WHERE m.patient_id = ?
                UNION
                SELECT hi.name AS indicator_name, vm.parsed_value AS monitoring_value, hi.reference_min, hi.reference_max
                FROM VoiceMonitoring vm
                JOIN HealthIndicators hi ON vm.indicator_id = hi.id
                WHERE vm.patient_id = ?
            """, (patient_id,patient_id))
            rows = cursor.fetchall()

            recommendations = []
            for row in rows:
                indicator_name, value, ref_min, ref_max = row
                if value < ref_min or value > ref_max:
                    recommendations.append(f"Indicator {indicator_name}: Out of range ({value}). Immediate attention required.")
            return recommendations
    except Exception as e:
        logging.error(f"Error generating doctor recommendations: {e}")
        return []

# –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
def analyze_risks(patient_id):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –∑–¥–æ—Ä–æ–≤—å—è
            cursor.execute("""
                SELECT hi.name AS indicator_name, vm.parsed_value, hi.reference_min, hi.reference_max
                FROM VoiceMonitoring vm
                JOIN HealthIndicators hi ON vm.indicator_id = hi.id
                WHERE vm.patient_id = ?
                ORDER BY vm.timestamp DESC
            """, (patient_id,))
            rows = cursor.fetchall()

            risks = []
            for row in rows:
                indicator_name, value, ref_min, ref_max = row
                if value < ref_min or value > ref_max:
                    risks.append(f"Risk detected for {indicator_name}: Value {value} out of range ({ref_min}-{ref_max}).")
            return risks
    except Exception as e:
        logging.error(f"Error analyzing risks: {e}")
        return []

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
def generate_analytics_report():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT d.name AS disease_name, COUNT(vm.id) AS monitoring_count,
                   SUM(CASE WHEN vm.parsed_value < hi.reference_min OR vm.parsed_value > hi.reference_max THEN 1 ELSE 0 END) AS out_of_range_count
            FROM VoiceMonitoring vm
            JOIN HealthIndicators hi ON vm.indicator_id = hi.id
            JOIN PatientDiseases pd ON vm.patient_id = pd.patient_id
            JOIN Diseases d ON pd.disease_id = d.id
            GROUP BY d.name
        """)
        rows = cursor.fetchall()
        report = [
            {
                "Disease Name": row[0],
                "Monitoring Count": row[1],
                "Out of Range Count": row[2]
            }
            for row in rows
        ]
        return report

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
def add_question(indicator_id, question_text, example_response):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO Questions (indicator_id, question_text, example_response)
                VALUES (?, ?, ?)
            """, (indicator_id, question_text, example_response))
            conn.commit()
            logging.debug(f"Question added for Indicator ID {indicator_id}")
        return True
    except Exception as e:
        logging.error(f"Error adding question: {e}")
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
def get_all_questions():
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT q.id, hi.name AS indicator_name, q.question_text, q.example_response
            FROM Questions q
            JOIN HealthIndicators hi ON q.indicator_id = hi.id
        """)
        rows = cursor.fetchall()
        questions = [
            {
                "ID": row[0],
                "Indicator Name": row[1],
                "Question Text": row[2],
                "Example Response": row[3]
            }
            for row in rows
        ]
        return questions

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
def update_question(question_id, new_question_text, new_example_response):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE Questions
                SET question_text = ?, example_response = ?
                WHERE id = ?
            """, (new_question_text, new_example_response, question_id))
            conn.commit()
            logging.debug(f"Question updated: ID {question_id}")
        return True
    except Exception as e:
        logging.error(f"Error updating question: {e}")
        return False

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
def delete_question(question_id):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM Questions WHERE id = ?", (question_id,))
            conn.commit()
            logging.debug(f"Question deleted: ID {question_id}")
        return True
    except Exception as e:
        logging.error(f"Error deleting question: {e}")
        return False

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
def get_data_retention_period():
    with conn:
        c.execute("SELECT setting_value FROM Settings WHERE setting_name = 'data_retention_period'")
        row = c.fetchone()
        if row:
            return int(row[0])
        return 30  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (30 –¥–Ω–µ–π)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
def update_data_retention_period(days):
    try:
        with conn:
            c.execute("""
                INSERT OR REPLACE INTO Settings (setting_name, setting_value)
                VALUES ('data_retention_period', ?)
            """, (days,))
            conn.commit()
            logging.debug(f"Data retention period updated to {days} days")
        return True
    except Exception as e:
        logging.error(f"Error updating data retention period: {e}")
        return False

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
def delete_old_records():
    try:
        retention_period = get_data_retention_period()
        cutoff_date = datetime.now() - timedelta(days=retention_period)

        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM VoiceMonitoring WHERE timestamp < ?", (cutoff_date,))
            conn.commit()
            logging.debug(f"Deleted records older than {cutoff_date}")
        return True
    except Exception as e:
        logging.error(f"Error deleting old records: {e}")
        return False











func.py
import streamlit as st
import plotly as px
from database import get_monitoring_data,generate_report_by_disease,conn,c

def schedule_monitoring(patient_id, indicator_id, frequency):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    st.write(f"Monitoring scheduled for patient {patient_id} with frequency {frequency}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞–º
def get_patient_report():
    with conn:
        c.execute("""
            SELECT p.name AS patient_name, hi.name AS indicator_name, COUNT(m.id) AS monitoring_count,
                   AVG(m.value) AS avg_value, MIN(m.value) AS min_value, MAX(m.value) AS max_value
            FROM Monitoring m
            JOIN Patients p ON m.patient_id = p.id
            JOIN HealthIndicators hi ON m.indicator_id = hi.id
            GROUP BY p.name, hi.name
        """)
        rows = c.fetchall()
        report = [
            {
                "Patient Name": row[0],
                "Indicator Name": row[1],
                "Monitoring Count": row[2],
                "Average Value": row[3],
                "Min Value": row[4],
                "Max Value": row[5]
            }
            for row in rows
        ]
        return report

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º
def get_disease_report():
    with conn:
        c.execute("""
            SELECT d.name AS disease_name, hi.name AS indicator_name, COUNT(m.id) AS monitoring_count,
                   AVG(m.value) AS avg_value, MIN(m.value) AS min_value, MAX(m.value) AS max_value
            FROM Monitoring m
            JOIN HealthIndicators hi ON m.indicator_id = hi.id
            JOIN PatientDiseases pd ON m.patient_id = pd.patient_id
            JOIN Diseases d ON pd.disease_id = d.id
            GROUP BY d.name, hi.name
        """)
        rows = c.fetchall()
        report = [
            {
                "Disease Name": row[0],
                "Indicator Name": row[1],
                "Monitoring Count": row[2],
                "Average Value": row[3],
                "Min Value": row[4],
                "Max Value": row[5]
            }
            for row in rows
        ]
        return report

# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º –∑–¥–æ—Ä–æ–≤—å—è
def get_indicator_report():
    with conn:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT hi.name AS indicator_name, COUNT(m.id) AS monitoring_count,
                   AVG(m.value) AS avg_value, MIN(m.value) AS min_value, MAX(m.value) AS max_value
            FROM Monitoring m
            JOIN HealthIndicators hi ON m.indicator_id = hi.id
            GROUP BY hi.name
        """)
        rows = cursor.fetchall()
        report = [
            {
                "Indicator Name": row[0],
                "Monitoring Count": row[1],
                "Average Value": row[2],
                "Min Value": row[3],
                "Max Value": row[4]
            }
            for row in rows
        ]
        return report





# voice_bot.py
from transformers import SpeechT5Processor, SpeechT5ForTextToSpeech
#import torch

processor = SpeechT5Processor.from_pretrained("microsoft/speecht5_tts")
model = SpeechT5ForTextToSpeech.from_pretrained("microsoft/speecht5_tts")

def text_to_speech(text):
    inputs = processor(text=text, return_tensors="pt")
    speech = model.generate_speech(inputs["input_ids"])
    return speech.numpy()



cleanup.py
from database import delete_old_records

if __name__ == "__main__":
    delete_old_records()